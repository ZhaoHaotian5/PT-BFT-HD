enclave
{
    from "sgx_tsgxssl.edl" import *;
    include "../App/config.h"
    include "../App/types.h"
    include "../App/key.h"
    include "../Enclave/EnclaveUsertypes.h"

	// ECALLs
    trusted
	{
        public sgx_status_t initializeVariables_t([in] ReplicaID *me, [in] Pids_t *others, [in] unsigned int *GeneralQuorumSize, [in] unsigned int *TrustedQuorumSize);
		
		public sgx_status_t TEE_verifyProposalDamysus([in] Proposal_t *proposal_t, [in] Signs_t *signs_t, [out] bool *b);
		public sgx_status_t TEE_verifyJustificationDamysus([in] Justification_t *justification_t, [out] bool *b);
        public sgx_status_t TEE_initializeMsgNewviewDamysus([out] Justification_t *justification_MsgNewview_t);
        public sgx_status_t TEE_initializeAccumulatorDamysus([in] Justifications_t *justifications_MsgNewview_t, [out] Accumulator_t *accumulator_MsgLdrprepare_t);
		public sgx_status_t TEE_initializeMsgLdrprepareDamysus([in] Proposal_t *proposal_MsgLdrprepare_t, [out] Signs_t *signs_MsgLdrprepare_t);
		public sgx_status_t TEE_respondProposalDamysus([in] Hash_t *proposeHash_t, [in] Accumulator_t *accumulator_MsgLdrprepare_t, [out] Justification_t *justification_MsgPrepare_t);
        public sgx_status_t TEE_saveMsgPrepareDamysus([in] Justification_t *justification_MsgPrepare_t, [out] Justification_t *justification_MsgPrecommit_t);

		public sgx_status_t TEE_verifyProposalPtbft([in] Proposal_t *proposal_t, [in] Signs_t *signs_t, [out] bool *b);
		public sgx_status_t TEE_verifyExproposalPtbft([in] Exproposal_t *exproposal_t, [in] Signs_t *signs_t, [out] bool *b);
		public sgx_status_t TEE_verifyJustificationPtbft([in] Justification_t *justification_t, [out] bool *b);
        public sgx_status_t TEE_initializeMsgNewviewPtbft([out] Justification_t *justification_MsgNewview_t);
        public sgx_status_t TEE_initializeAccumulatorPtbft([in] Justifications_t *justifications_MsgNewview_t, [out] Accumulator_t *accumulator_MsgLdrprepare_t);
		public sgx_status_t TEE_initializeMsgLdrpreparePtbft([in] Proposal_t *proposal_MsgLdrprepare_t, [out] Signs_t *signs_MsgLdrprepare_t);
		public sgx_status_t TEE_respondProposalPtbft([in] Hash_t *proposeHash_t, [in] Accumulator_t *accumulator_MsgLdrprepare_t, [out] Justification_t *justification_MsgPrepare_t);
        public sgx_status_t TEE_saveMsgPreparePtbft([in] Justification_t *justification_MsgPrepare_t, [out] Justification_t *justification_MsgPrecommit_t);
		public sgx_status_t TEE_initializeMsgExnewviewPtbft([out] Justification_t *justification_MsgExnewview_t);
		public sgx_status_t TEE_respondExproposalPtbft([in] Hash_t *proposeHash_t, [in] Justification_t *justification_MsgExnewview_t, [out] Justification_t *justification_MsgExprepare_t);
		public sgx_status_t TEE_initializeMsgExldrpreparePtbft([in] Exproposal_t *proposal_MsgExldrprepare_t, [out] Signs_t *signs_MsgExldrprepare_t);
		public sgx_status_t TEE_saveMsgExpreparePtbft([in] Justification_t *justification_MsgExprepare_t, [out] Justification_t *justification_MsgExprecommit_t);
		public sgx_status_t TEE_lockMsgExprecommitPtbft([in] Justification_t *justification_MsgExprecommit_t, [out] Justification_t *justification_MsgExcommit_t);
    };

	// OCALLs
    untrusted
	{	
        void TEE_Print([in, string] const char* text);
    };
};
